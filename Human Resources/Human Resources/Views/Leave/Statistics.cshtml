@using Human_Resources.Data.ViewModels
@model StatisticsViewModel
<!DOCTYPE html>
<html>
<head>
    <title>Chart.js Example</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div id="chartContainer" @*class="container"*@ style="width: 70%; height: 20%;">
        <canvas id="myChart"></canvas>
    </div>
    
    <button onclick="exportChart('myChart')" class="btn btn-primary">Export Chart</button>
    <div id="chartContainer" @*class="container"*@ style="width: 70%; height: 20%;">
        <canvas id="PieChart"></canvas>
    </div>
    <button onclick="exportChart('myChart2')" class="btn btn-primary">Export Chart</button>
    @{
        var labelsPie = new [] {"Pending","Accepted","Rejected"};
        var valuesPie = Model.PieChart;
    }

    <script>
        document.addEventListener("DOMContentLoaded",function(){

        
        var chartData = @Html.Raw(Json.Serialize(Model.chartDatas));
        //var labelsPieJson = Json.Serialize(labelsPie);
        //var valuesPieJson = Json.Serialize(valuesPie);
        console.log(chartData)
        var labels = chartData.map(data => data.label);
        var values = chartData.map(data => data.value);
        

        new Chart(document.getElementById("myChart"), {
            type: "bar",
            data: {
                labels: labels,
                datasets: [{
                    label: "Leave Frequency Table",
                    data: values
                }]
            },
            options: {
                aspectRatio: 1,
                responsive: true,
                plugins: {
                    datalabels: {
                        anchor: "end",
                        align: "top",
                        color: "#333",
                        font: {
                            weight: "bold"
                        },
                        formatter: function (value, context) {
                            return value;
                        }
                    }
                }
            },
        });
    });
        

        function exportChart(value) {
            domtoimage.toBlob(document.getElementById(value), {
                bgcolor: 'transparent'
            })
                .then(function (blob) {
                    // Create a temporary link element
                    var link = document.createElement("a");
                    link.download = "chart.png";
                    link.href = window.URL.createObjectURL(blob);

                    // Simulate a click on the link to trigger the download
                    link.click();

                    // Cleanup
                    window.URL.revokeObjectURL(link.href);
                });
        }

    </script>
    <script>
        var labelsPieJson = @Json.Serialize(labelsPie);
        var valuesPieJson = @Json.Serialize(valuesPie);
      
        new Chart(document.getElementById('PieChart').getContext('2d'), {
                    type: 'pie',
                    data: {
                        labels: labelsPieJson,
                        datasets: [{
                            data: valuesPieJson,
                            backgroundColor: ['#FFCE56', '#36A2EB', '#FF6384'],
                            hoverBackgroundColor: ['#FFCE56', '#36A2EB', '#FF6384']
                        }]
                    },
                    options: {
                        aspectRatio: 1,
                        responsive: true
                    }
                });

    </script>
</body>
</html>
